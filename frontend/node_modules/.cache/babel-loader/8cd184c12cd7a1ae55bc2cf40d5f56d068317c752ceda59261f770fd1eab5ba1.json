{"ast":null,"code":"var _jsxFileName = \"/Users/abhayarao/Documents/PES Engineering/3rd YEAR/6th SEM/GDG On Campus Solution/InvestEase/frontend/src/context/ChatContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { chatService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendMessage = useCallback(async content => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Add user message to chat\n      const userMessage = {\n        role: 'user',\n        content\n      };\n      setMessages(prev => [...prev, userMessage]);\n\n      // Send to backend\n      const response = await chatService.sendMessage([userMessage]);\n\n      // Add AI response to chat\n      setMessages(prev => [...prev, {\n        role: 'assistant',\n        content: response.response\n      }]);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error sending message:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const clearChat = useCallback(() => {\n    setMessages([]);\n    setError(null);\n  }, []);\n  const value = {\n    messages,\n    loading,\n    error,\n    sendMessage,\n    clearChat\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n};\n_s(ChatProvider, \"Ldr3QJUKjNmz0dvYz1BrAGE8EBI=\");\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ChatContext;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","chatService","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","messages","setMessages","loading","setLoading","error","setError","sendMessage","content","userMessage","role","prev","response","err","message","console","clearChat","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","Error","$RefreshReg$"],"sources":["/Users/abhayarao/Documents/PES Engineering/3rd YEAR/6th SEM/GDG On Campus Solution/InvestEase/frontend/src/context/ChatContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\nimport { chatService } from '../services/api';\n\nconst ChatContext = createContext();\n\nexport const ChatProvider = ({ children }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendMessage = useCallback(async (content) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Add user message to chat\n      const userMessage = { role: 'user', content };\n      setMessages(prev => [...prev, userMessage]);\n\n      // Send to backend\n      const response = await chatService.sendMessage([userMessage]);\n      \n      // Add AI response to chat\n      setMessages(prev => [...prev, {\n        role: 'assistant',\n        content: response.response\n      }]);\n\n    } catch (err) {\n      setError(err.message);\n      console.error('Error sending message:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const clearChat = useCallback(() => {\n    setMessages([]);\n    setError(null);\n  }, []);\n\n  const value = {\n    messages,\n    loading,\n    error,\n    sendMessage,\n    clearChat,\n  };\n\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\n};\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n\nexport default ChatContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/E,SAASC,WAAW,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMe,WAAW,GAAGd,WAAW,CAAC,MAAOe,OAAO,IAAK;IACjD,IAAI;MACFJ,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACA,MAAMG,WAAW,GAAG;QAAEC,IAAI,EAAE,MAAM;QAAEF;MAAQ,CAAC;MAC7CN,WAAW,CAACS,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEF,WAAW,CAAC,CAAC;;MAE3C;MACA,MAAMG,QAAQ,GAAG,MAAMlB,WAAW,CAACa,WAAW,CAAC,CAACE,WAAW,CAAC,CAAC;;MAE7D;MACAP,WAAW,CAACS,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAC5BD,IAAI,EAAE,WAAW;QACjBF,OAAO,EAAEI,QAAQ,CAACA;MACpB,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZP,QAAQ,CAACO,GAAG,CAACC,OAAO,CAAC;MACrBC,OAAO,CAACV,KAAK,CAAC,wBAAwB,EAAEQ,GAAG,CAAC;IAC9C,CAAC,SAAS;MACRT,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,SAAS,GAAGvB,WAAW,CAAC,MAAM;IAClCS,WAAW,CAAC,EAAE,CAAC;IACfI,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,KAAK,GAAG;IACZhB,QAAQ;IACRE,OAAO;IACPE,KAAK;IACLE,WAAW;IACXS;EACF,CAAC;EAED,oBAAOpB,OAAA,CAACC,WAAW,CAACqB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAlB,QAAA,EAAEA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAACtB,EAAA,CA7CWF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AA+CzB,OAAO,MAAM0B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGnC,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAAC6B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAQpB,eAAe3B,WAAW;AAAC,IAAA0B,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}